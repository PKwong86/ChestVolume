z = vertices[, 3],
i = simplices_zero_based[, 1],
j = simplices_zero_based[, 2],
k = simplices_zero_based[, 3],
type = 'mesh3d',
name = paste('Convex Hull -', selected_segment),
color = highlight_color,
opacity = 0.5,
showlegend = FALSE,
inherit = FALSE  # Prevent inheritance of attributes
)
} else {
warning("Not enough points to form a convex hull for the selected segment.")
}
# Add layout settings
plot <- plot %>%
layout(
scene = list(
xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z'),
camera = list(eye = list(x = 1.25, y = 1.25, z = 1.25))
),
title = paste('3D Chest Markers at Timeframe', timeframe, '- Highlighted Segment:', selected_segment)
)
return(plot)
}
plot_chest_3d(a, segments, selected_segment = 'UL')
segments <- list(
UL = c("M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08",'M25'),
UR = c("M09", "M10", "M11", "M12", "M13", "M14", "M15", "M16")
)
segments <- list(
UL = c("M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08",'M25'),
UR = c("M09", "M10", "M11", "M12", "M13", "M14", "M15", "M16")
)
plot_chest_3d(a, segments, selected_segment = 'UL')
segments <- list(
UL = c("M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08",'M18'),
UR = c("M09", "M10", "M11", "M12", "M13", "M14", "M15", "M16")
)
calculate_segment_volumes(b, segments)
plot_chest_3d(a, segments, selected_segment = 'UL')
#'   \item Subsequent columns contain the marker names belonging to each segment.
#' }
#' Missing marker entries can be left blank or filled with \code{NA}.
#' @examples
#' \dontrun{
#' # Assume 'segments.xlsx' is your Excel file with segment definitions
#' segments <- read_segment_definitions("segments.xlsx")
#' }
#' @import readxl
#' @export
read_segment_definitions <- function(filepath) {
# Load necessary package
library(readxl)
# Read the Excel file
segment_data <- read_excel(filepath, col_names = FALSE)
# Ensure there is at least one column
if (ncol(segment_data) < 2) {
stop("The Excel file must have at least two columns: one for segment names and at least one for marker names.")
}
# Initialize the segments list
segments <- list()
# Loop over each row to extract segment names and marker names
for (i in 1:nrow(segment_data)) {
segment_name <- as.character(segment_data[i, 1])
marker_names <- as.character(segment_data[i, -1])
# Remove NA and empty strings
marker_names <- marker_names[!is.na(marker_names) & marker_names != ""]
# Add to the segments list
segments[[segment_name]] <- marker_names
}
return(segments)
}
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume/data")
a <- read_segment_definitions('segment_def.xlsx')
View(a)
View(segments)
calculate_segment_volumes(b, a)
View(a)
vol <- calculate_segment_volumes(b, a)
View(vol)
plot_chest_3d(b, a, selected_segment = 'UL')
plot_chest_3d(b, a, selected_segment = 'LL')
plot_chest_3d(b, a, selected_segment = 'LR')
read_segment_definitions('segment_def.xlsx')
plot_chest_3d(b, a, selected_segment = 'LR')
a <- read_segment_definitions('segment_def.xlsx')
plot_chest_3d(b, a, selected_segment = 'LR')
plot_chest_3d(b, a, selected_segment = 'UR')
devtools::document()
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume")
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume")
devtools::document()
devtools::document()
devtools::document()
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume")
devtools::document()
devtools::document()
devtools::document()
install.packages("roxygen2")
check()
library(ChestVolume)
devtools::document()
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume")
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume")
devtools::document()
devtools::document()
library(ChestVolume)
load("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume/data/sample_data.rda")
df <- process_marker_data(sample_data)
df_a <- adj_position(df)
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume/data")
read_segment_definitions('segment_def.xlsx')
seg <- read_segment_definitions('segment_def.xlsx')
#' volume_data <- data.frame(
#'   frame = time_frames,
#'   UL = runif(100, min = 100, max = 150),
#'   UR = runif(100, min = 120, max = 160),
#'   LL = runif(100, min = 90, max = 140),
#'   LR = runif(100, min = 110, max = 170)
#' )
#' segment_names <- c("UL", "UR", "LL", "LR")
#' plot_volume_change_by_segment(volume_data, segment_names)
#'
plot_2d_volume <- function(volume_data, segment_names, title = "Volume Change by Segment") {
# Ensure 'frame' column is present
if (!"frame" %in% names(volume_data)) {
stop("The 'volume_data' must contain a 'frame' column for time points.")
}
# Ensure segment names match column names in volume_data
if (!all(segment_names %in% colnames(volume_data))) {
stop("All provided segment names must match column names in 'volume_data'.")
}
# Reshape data to long format for plotting with ggplot
volume_long <- volume_data %>%
pivot_longer(cols = all_of(segment_names), names_to = "segment", values_to = "volume")
# Create the ggplot
ggplot(volume_long, aes(x = frame, y = volume, color = segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
}
vol <- calculate_segment_volumes(df_a, segments = seg, adjust_markers = F)
View(df_a)
vol <- calculate_segment_volumes(df_a, segments = seg)
plot_chest_3d(df_a, seg)
plot_chest_3d(df_a, seg, 'UL')
#'   UR = c("M05", "M06", "M07", "M08")
#' )
#'
#' # Assume 'adjusted_data' is the data frame with adjusted marker positions in cm
#' volumes_df <- calculate_segment_volumes(adjusted_data, segments)
#' head(volumes_df)
#'
#' @import dplyr
#' @import geometry
#' @export
calculate_segment_volumes <- function(data, segments) {
# Load necessary packages
library(dplyr)
# Initialize a list to store volume data frames
volume_list <- list()
# Loop over each segment
for (segment_name in names(segments)) {
segment_markers <- segments[[segment_name]]
# Filter data for the markers in this segment
segment_data <- data %>%
filter(Marker %in% segment_markers)
# Calculate volumes for each timeframe
segment_volumes <- segment_data %>%
group_by(Timeframe) %>%
do({
df <- .
coords <- as.matrix(df[, c("X", "Y", "Z")])
# Handle cases where convex hull cannot be formed
if (nrow(coords) >= 4) {
hull <- geometry::convhulln(coords, options = "FA")
volume <- hull$vol
} else {
volume <- NA
}
data.frame(Volume = volume)
}) %>%
ungroup() %>%
mutate(Segment = segment_name)
# Append to the list
volume_list[[segment_name]] <- segment_volumes
}
# Combine all volume data frames
volumes_df <- bind_rows(volume_list)
# Reorder columns
volumes_df <- volumes_df[, c("Timeframe", "Segment", "Volume")]
# Arrange data
volumes_df <- volumes_df %>%
arrange(Timeframe, Segment)
return(volumes_df)
}
vol <- calculate_segment_volumes(df_a, segments = seg)
View(vol)
plot_2d_volume(vol)
View(vol)
View(vol)
plot_2d_volume(vol)
#' volume_data <- data.frame(
#'   frame = time_frames,
#'   UL = runif(100, min = 100, max = 150),
#'   UR = runif(100, min = 120, max = 160),
#'   LL = runif(100, min = 90, max = 140),
#'   LR = runif(100, min = 110, max = 170)
#' )
#' segment_names <- c("UL", "UR", "LL", "LR")
#' plot_volume_change_by_segment(volume_data, segment_names)
#'
plot_2d_volume <- function(volume_data, segment_names, title = "Volume Change by Segment") {
# Ensure 'frame' column is present
if (!"Timeframe" %in% names(volume_data)) {
stop("The 'volume_data' must contain a 'Timeframe' column for time points.")
}
# Ensure segment names match column names in volume_data
if (!all(segment_names %in% colnames(volume_data))) {
stop("All provided segment names must match column names in 'volume_data'.")
}
# Reshape data to long format for plotting with ggplot
volume_long <- volume_data %>%
pivot_longer(cols = all_of(segment_names), names_to = "segment", values_to = "volume")
# Create the ggplot
ggplot(volume_long, aes(x = frame, y = volume, color = segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
}
plot_2d_volume(vol)
plot_2d_volume(vol, 'UL')
View(vol)
View(vol)
plot_2d_volume(vol, segment_names = 'LL')
View(plot_2d_volume)
View(plot_2d_volume)
View(vol)
plot_2d_volume(vol, segment_names = 'Segment')
View(plot_2d_volume)
#' volume_data <- data.frame(
#'   frame = time_frames,
#'   UL = runif(100, min = 100, max = 150),
#'   UR = runif(100, min = 120, max = 160),
#'   LL = runif(100, min = 90, max = 140),
#'   LR = runif(100, min = 110, max = 170)
#' )
#' segment_names <- c("UL", "UR", "LL", "LR")
#' plot_volume_change_by_segment(volume_data, segment_names)
#'
plot_2d_volume <- function(volume_data, segment_names, title = "Volume Change by Segment") {
# Ensure 'frame' column is present
if (!"Timeframe" %in% names(volume_data)) {
stop("The 'volume_data' must contain a 'Timeframe' column for time points.")
}
# Ensure segment names match column names in volume_data
if (!all(segment_names %in% colnames(volume_data))) {
stop("All provided segment names must match column names in 'volume_data'.")
}
# Reshape data to long format for plotting with ggplot
volume_long <- volume_data %>%
pivot_longer(cols = all_of(segment_names), names_to = "segment", values_to = "volume")
# Create the ggplot
ggplot(volume_long, aes(x = Timeframe, y = volume, color = segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
}
plot_2d_volume(vol, segment_names = 'Segment')
View(plot_2d_volume)
View(df_a)
View(vol)
volume_data <- vol
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = volume, color = segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
View(vol)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
View(vol)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
labs(x = "Timeframe", y = "Volume") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
library(readxl)
LBP_study <- read_excel("C:/Users/whkwong/Dropbox/WCPT2025/LBP study.xlsx")
View(LBP_study)
df <- na.omit(LBP_study)
table(df$`group (E/C)`)
which(df$`group (E/C)`=='E')
which(df$`group (E/C)`=='E')[1:24]
exp<- df[which(df$`group (E/C)`=='E')[1:24],)
exp<- df[which(df$`group (E/C)`=='E')[1:24],]
con <- df[which(df$`group (E/C)`=='C'),]
df2 <- rbind(exp, con)
setwd("C:/Users/whkwong/Dropbox/WCPT2025")
library(writexl)
write_xlsx(df2, 'naremove.xlsx')
library(readxl)
naremove <- read_excel("naremove.xlsx")
View(naremove)
df3 <- naremove
ggplot(df3, aex(x = Pain, group =`group (E/C)`)) + geom_boxplot()+ facet_wrap(.~Time)
ggplot(df3, aes(x = Pain, group =`group (E/C)`)) + geom_boxplot()+ facet_wrap(.~Time)
ggplot(df3, aes(x = Pain, col =`group (E/C)`)) + geom_boxplot()+ facet_wrap(.~Time)
library(ez)
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = `group (E/C)`)
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = df3$`group (E/C)`)
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between =`group (E/C)`)
library(readxl)
naremove <- read_excel("naremove.xlsx")
View(naremove)
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = group)
df3 <- naremove
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = group)
ezANOVA(df3, dv = FABQ, wid = Code, within = Time, between = group)
ezANOVA(df3, dv = ODI, wid = Code, within = Time, between = group)
ggplot(df3, aes(x = FABQ, col =group)) + geom_boxplot()+ facet_wrap(.~Time)
ggplot(df3, aes(x = group, y = FBAQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = code)) +
geom_point(size = 2) +
facet_wrap(~Time)
ggplot(df3, aes(x = group, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = code)) +
geom_point(size = 2) +
facet_wrap(~Time)
ggplot(df3, aes(x = group, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~Time)
View(df3)
ggplot(df3, aes(x = Time, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group)
df3$Time <- factor(df3$Time, levels = c('Pre', 'Post'))
ggplot(df3, aes(x = Time, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group)
lm(FABQ ~ group, data = df3)
summary(lm(FABQ ~ group, data = df3))
library(tidyverse)
df3 %>% filter(Time=='Pre') %>% summary(lm(FABQ ~ group, data = df3))
df3 %>% filter(Time=='Pre') %>% summary(lm(FABQ ~ group))
df3$Pre <- df3 %>% dplyr::filter(Time == 'Pre')
df3_Pre <- df3 %>% dplyr::filter(Time == 'Pre')
df3_Pre <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
df3_Pre_C <- df3 %>% dplyr::filter(Time == 'Pre', group =='C')
df3_Pre_E <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
t.test(df3_Pre_E$FABQ, df3_Pre_C$FABQ)
library(readxl)
naremove <- read_excel("naremove.xlsx")
View(naremove)
df3 <- naremove
ezANOVA(df3, dv = ODI, wid = Code, within = Time, between = group)
ezANOVA(df3, dv = FABQ, wid = Code, within = Time, between = group)
df3_Pre_E <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
df3_Pre_C <- df3 %>% dplyr::filter(Time == 'Pre', group =='C')
t.test(df3_Pre_E$FABQ, df3_Pre_C$FABQ)
df3$Time <- factor(df3$Time, levels = c('Pre', 'Post'))
ggplot(df3, aes(x = Time, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group)
library(readxl)
naremove <- read_excel("naremove.xlsx")
View(naremove)
df3 <- naremove
ezANOVA(df3, dv = FABQ, wid = Code, within = Time, between = group)
df3 <- naremove
ezANOVA(df3, dv = FABQ, wid = Code, within = Time, between = group)
df3_Pre_E <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
df3_Pre_C <- df3 %>% dplyr::filter(Time == 'Pre', group =='C')
t.test(df3_Pre_E$FABQ, df3_Pre_C$FABQ)
df3$Time <- factor(df3$Time, levels = c('Pre', 'Post'))
ggplot(df3, aes(x = Time, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group)
ggplot(df3, aes(x = Time, y = ODI)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group)
ggplot(df3, aes(x = Time, y = ODI)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group) + theme_bw()
ggplot(df3, aes(x = Time, y = Pain)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group) + theme_bw()
t.test(df3_Pre_E$Pain, df3_Pre_C$Pain)
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = group)
ezANOVA(df3, dv = ODI, wid = Code, within = Time, between = group)
library(readxl)
naremove <- read_excel("naremove.xlsx")
View(naremove)
df3 <- naremove
ezANOVA(df3, dv = ODI, wid = Code, within = Time, between = group)
df3_Pre_E <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
df3_Pre_C <- df3 %>% dplyr::filter(Time == 'Pre', group =='C')
t.test(df3_Pre_E$Pain, df3_Pre_C$Pain)
df3$Time <- factor(df3$Time, levels = c('Pre', 'Post'))
ggplot(df3, aes(x = Time, y = Pain)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group) + theme_bw()
naremove <- read_excel("naremove.xlsx")
df3 <- naremove
ezANOVA(df3, dv = ODI, wid = Code, within = Time, between = group)
df3_Pre_E <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
df3_Pre_C <- df3 %>% dplyr::filter(Time == 'Pre', group =='C')
t.test(df3_Pre_E$Pain, df3_Pre_C$Pain)
df3$Time <- factor(df3$Time, levels = c('Pre', 'Post'))
ggplot(df3, aes(x = Time, y = Pain)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group) + theme_bw()
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = group)
library(ChestVolume)
?chestvolume
devtools::document()
