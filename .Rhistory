volume <- hull$vol
} else {
volume <- NA
}
data.frame(Volume = volume)
}) %>%
ungroup() %>%
mutate(Segment = segment_name)
# Append to the list
volume_list[[segment_name]] <- segment_volumes
}
# Combine all volume data frames
volumes_df <- bind_rows(volume_list)
# Reorder columns
volumes_df <- volumes_df[, c("Timeframe", "Segment", "Volume")]
# Arrange data
volumes_df <- volumes_df %>%
arrange(Timeframe, Segment)
return(volumes_df)
}
vol <- calculate_segment_volumes(df_a, segments = seg)
View(vol)
plot_2d_volume(vol)
View(vol)
View(vol)
plot_2d_volume(vol)
#' volume_data <- data.frame(
#'   frame = time_frames,
#'   UL = runif(100, min = 100, max = 150),
#'   UR = runif(100, min = 120, max = 160),
#'   LL = runif(100, min = 90, max = 140),
#'   LR = runif(100, min = 110, max = 170)
#' )
#' segment_names <- c("UL", "UR", "LL", "LR")
#' plot_volume_change_by_segment(volume_data, segment_names)
#'
plot_2d_volume <- function(volume_data, segment_names, title = "Volume Change by Segment") {
# Ensure 'frame' column is present
if (!"Timeframe" %in% names(volume_data)) {
stop("The 'volume_data' must contain a 'Timeframe' column for time points.")
}
# Ensure segment names match column names in volume_data
if (!all(segment_names %in% colnames(volume_data))) {
stop("All provided segment names must match column names in 'volume_data'.")
}
# Reshape data to long format for plotting with ggplot
volume_long <- volume_data %>%
pivot_longer(cols = all_of(segment_names), names_to = "segment", values_to = "volume")
# Create the ggplot
ggplot(volume_long, aes(x = frame, y = volume, color = segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
}
plot_2d_volume(vol)
plot_2d_volume(vol, 'UL')
View(vol)
View(vol)
plot_2d_volume(vol, segment_names = 'LL')
View(plot_2d_volume)
View(plot_2d_volume)
View(vol)
plot_2d_volume(vol, segment_names = 'Segment')
View(plot_2d_volume)
#' volume_data <- data.frame(
#'   frame = time_frames,
#'   UL = runif(100, min = 100, max = 150),
#'   UR = runif(100, min = 120, max = 160),
#'   LL = runif(100, min = 90, max = 140),
#'   LR = runif(100, min = 110, max = 170)
#' )
#' segment_names <- c("UL", "UR", "LL", "LR")
#' plot_volume_change_by_segment(volume_data, segment_names)
#'
plot_2d_volume <- function(volume_data, segment_names, title = "Volume Change by Segment") {
# Ensure 'frame' column is present
if (!"Timeframe" %in% names(volume_data)) {
stop("The 'volume_data' must contain a 'Timeframe' column for time points.")
}
# Ensure segment names match column names in volume_data
if (!all(segment_names %in% colnames(volume_data))) {
stop("All provided segment names must match column names in 'volume_data'.")
}
# Reshape data to long format for plotting with ggplot
volume_long <- volume_data %>%
pivot_longer(cols = all_of(segment_names), names_to = "segment", values_to = "volume")
# Create the ggplot
ggplot(volume_long, aes(x = Timeframe, y = volume, color = segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
}
plot_2d_volume(vol, segment_names = 'Segment')
View(plot_2d_volume)
View(df_a)
View(vol)
volume_data <- vol
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = volume, color = segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
View(vol)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
View(vol)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume", color = "Segment") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
labs(title = title, x = "Timeframe", y = "Volume") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
labs(x = "Timeframe", y = "Volume") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
library(readxl)
LBP_study <- read_excel("C:/Users/whkwong/Dropbox/WCPT2025/LBP study.xlsx")
View(LBP_study)
df <- na.omit(LBP_study)
table(df$`group (E/C)`)
which(df$`group (E/C)`=='E')
which(df$`group (E/C)`=='E')[1:24]
exp<- df[which(df$`group (E/C)`=='E')[1:24],)
exp<- df[which(df$`group (E/C)`=='E')[1:24],]
con <- df[which(df$`group (E/C)`=='C'),]
df2 <- rbind(exp, con)
setwd("C:/Users/whkwong/Dropbox/WCPT2025")
library(writexl)
write_xlsx(df2, 'naremove.xlsx')
library(readxl)
naremove <- read_excel("naremove.xlsx")
View(naremove)
df3 <- naremove
ggplot(df3, aex(x = Pain, group =`group (E/C)`)) + geom_boxplot()+ facet_wrap(.~Time)
ggplot(df3, aes(x = Pain, group =`group (E/C)`)) + geom_boxplot()+ facet_wrap(.~Time)
ggplot(df3, aes(x = Pain, col =`group (E/C)`)) + geom_boxplot()+ facet_wrap(.~Time)
library(ez)
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = `group (E/C)`)
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = df3$`group (E/C)`)
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between =`group (E/C)`)
library(readxl)
naremove <- read_excel("naremove.xlsx")
View(naremove)
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = group)
df3 <- naremove
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = group)
ezANOVA(df3, dv = FABQ, wid = Code, within = Time, between = group)
ezANOVA(df3, dv = ODI, wid = Code, within = Time, between = group)
ggplot(df3, aes(x = FABQ, col =group)) + geom_boxplot()+ facet_wrap(.~Time)
ggplot(df3, aes(x = group, y = FBAQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = code)) +
geom_point(size = 2) +
facet_wrap(~Time)
ggplot(df3, aes(x = group, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = code)) +
geom_point(size = 2) +
facet_wrap(~Time)
ggplot(df3, aes(x = group, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~Time)
View(df3)
ggplot(df3, aes(x = Time, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group)
df3$Time <- factor(df3$Time, levels = c('Pre', 'Post'))
ggplot(df3, aes(x = Time, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group)
lm(FABQ ~ group, data = df3)
summary(lm(FABQ ~ group, data = df3))
library(tidyverse)
df3 %>% filter(Time=='Pre') %>% summary(lm(FABQ ~ group, data = df3))
df3 %>% filter(Time=='Pre') %>% summary(lm(FABQ ~ group))
df3$Pre <- df3 %>% dplyr::filter(Time == 'Pre')
df3_Pre <- df3 %>% dplyr::filter(Time == 'Pre')
df3_Pre <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
df3_Pre_C <- df3 %>% dplyr::filter(Time == 'Pre', group =='C')
df3_Pre_E <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
t.test(df3_Pre_E$FABQ, df3_Pre_C$FABQ)
library(readxl)
naremove <- read_excel("naremove.xlsx")
View(naremove)
df3 <- naremove
ezANOVA(df3, dv = ODI, wid = Code, within = Time, between = group)
ezANOVA(df3, dv = FABQ, wid = Code, within = Time, between = group)
df3_Pre_E <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
df3_Pre_C <- df3 %>% dplyr::filter(Time == 'Pre', group =='C')
t.test(df3_Pre_E$FABQ, df3_Pre_C$FABQ)
df3$Time <- factor(df3$Time, levels = c('Pre', 'Post'))
ggplot(df3, aes(x = Time, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group)
library(readxl)
naremove <- read_excel("naremove.xlsx")
View(naremove)
df3 <- naremove
ezANOVA(df3, dv = FABQ, wid = Code, within = Time, between = group)
df3 <- naremove
ezANOVA(df3, dv = FABQ, wid = Code, within = Time, between = group)
df3_Pre_E <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
df3_Pre_C <- df3 %>% dplyr::filter(Time == 'Pre', group =='C')
t.test(df3_Pre_E$FABQ, df3_Pre_C$FABQ)
df3$Time <- factor(df3$Time, levels = c('Pre', 'Post'))
ggplot(df3, aes(x = Time, y = FABQ)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group)
ggplot(df3, aes(x = Time, y = ODI)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group)
ggplot(df3, aes(x = Time, y = ODI)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group) + theme_bw()
ggplot(df3, aes(x = Time, y = Pain)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group) + theme_bw()
t.test(df3_Pre_E$Pain, df3_Pre_C$Pain)
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = group)
ezANOVA(df3, dv = ODI, wid = Code, within = Time, between = group)
library(readxl)
naremove <- read_excel("naremove.xlsx")
View(naremove)
df3 <- naremove
ezANOVA(df3, dv = ODI, wid = Code, within = Time, between = group)
df3_Pre_E <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
df3_Pre_C <- df3 %>% dplyr::filter(Time == 'Pre', group =='C')
t.test(df3_Pre_E$Pain, df3_Pre_C$Pain)
df3$Time <- factor(df3$Time, levels = c('Pre', 'Post'))
ggplot(df3, aes(x = Time, y = Pain)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group) + theme_bw()
naremove <- read_excel("naremove.xlsx")
df3 <- naremove
ezANOVA(df3, dv = ODI, wid = Code, within = Time, between = group)
df3_Pre_E <- df3 %>% dplyr::filter(Time == 'Pre', group =='E')
df3_Pre_C <- df3 %>% dplyr::filter(Time == 'Pre', group =='C')
t.test(df3_Pre_E$Pain, df3_Pre_C$Pain)
df3$Time <- factor(df3$Time, levels = c('Pre', 'Post'))
ggplot(df3, aes(x = Time, y = Pain)) +
geom_boxplot(aes(fill = group), alpha = .2) +
geom_line(aes(group = Code)) +
geom_point(size = 2) +
facet_wrap(~group) + theme_bw()
ezANOVA(df3, dv = Pain, wid = Code, within = Time, between = group)
library(ChestVolume)
?chestvolume
devtools::document()
devtools::document()
library(ChestVolume)
library(ChestVolume)
library(devtools)
devtools::install_github("PKwong86/ChestVolume")
1
library(devtools)
devtools::install_github("PKwong86/ChestVolume")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ChestVolume)
??donttest
??\donttest
?\donttest
\donttest
donttest
devtools::document()
library(ChestVolume)
devtools::document()
library(ChestVolume)
devtools::document()
library(ChestVolume)
library(ChestVolume)
devtools::document()
library(ChestVolume)
segments <- read_segment_definitions(system.file("segment_def.xlsx"))
system.file()
system.file(package = 'ChestVolume')
segments <- read_segment_definitions("segment_def.xlsx")
segments <- read_segment_definitions(system.file("extdata", "segment_def.xlsx", package="ChestVolume"))
devtools::document()
library(ChestVolume)
library(ChestVolume)
webshot::install_phantomjs()
summary(segments)
head(segments)
devtools::document()
library(ChestVolume)
library(ChestVolume)
plot_2d_volume(volumes, 'Segment')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ChestVolume)
library(ChestVolume)
knitr::kable(head(sample_data[, 1:6]), "pipe")
data(sample_data)
processed_data <- process_marker_data(sample_data, convert_to_cm = TRUE)
head(processed_data)
# Adjust the marker positions by moving them 1 cm toward the chest center
adjusted_data <- adj_position(processed_data, distance = 1)
head(adjusted_data)
segments <- list(
upper_left = c("M01", "M02", "M04", "M05","M07", "M08","M10", "M11")
)
volumes<- calculate_volumes(adjusted_data, segments)
head(volumes)
plot_2d_volume(volumes, 'Segment')
segments <- read_segment_definitions(system.file("extdata", "segment_def.xlsx", package="ChestVolume"))
head(segments)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ChestVolume)
library(devtools)
devtools::install_github("PKwong86/ChestVolume")
devtools::document()
path <- system.file("extdata", "segment_def.xlsx", package="ChestVolume")
devtools::document()
library(ChestVolume)
devtools::document()\
devtools::document()
library(ChestVolume)
install.packages("ChestVolume")
library(geometry)
library(tidyverse)
library(rgl)
library(readxl)
source('fx.R')
setwd("C:/Users/user/Dropbox/sharon lung volumn")
library(geometry)
library(tidyverse)
library(rgl)
library(readxl)
source('fx.R')
df <-
read_excel("gordon.xlsx")
reform <- sort(names(df))
df <- df[, reform]
vol_l <- list()
segment <- list()
segment[[1]] <- c(1,2,4,5,7,8,10,11,13,14,16,17)
segment[[2]] <- c(16,17,19,20,22,23,25,26,28,29,1,2)
segment[[3]] <- c(2,3,5,6,8,9,11,12,14,15,17,18)
segment[[4]] <- c(17,18,20,21,23,24,26,27,29,30,2,3)
for (h in 1:4) {
vol<-vector()
for (k in 10:500) {
points <- matrix(df[k, ] / 10, nrow = 31, byrow = T)
points <- as.data.frame(points)
center <- points[1, ]
point2 <- t(apply(points, 1, adj_position))
point_adj <- as.data.frame(point2[-1, ])
#points2 <- points[c(1,4,9,10,19,21,22,30),]
hull <- convhulln(point_adj[segment[[h]], ], options = "FA")
#hull2 <- convhulln(points2, options = "FA")
volume <- hull$vol
vol <- c(vol, volume)
}
vol_l[[h]] <- vol
}
#cat("The volume covered by the points is:", volume)
#scatterplot3d(points)
v_by_seg<- matrix(unlist(vol_l), nrow = length(vol_l[[1]]))
#plot_ly(as.data.frame(points), x = ~V1, y = ~V2, z=~V3)
#v_n <- as.data.frame(t(t(v_by_seg)/v_by_seg[1,]))
v_n <- as.data.frame(t(t(v_by_seg)))
colnames(v_n) <- c('UL','UR',"LL",'LR')
v_n$frame <- 1:nrow(v_n)
v_l <- gather(v_n, key = segment, volumn, -frame)
ggplot(v_l, aes(x=frame, y=volumn, col=segment)) + geom_line(size=1)
plot_seg(c(1:4),0.8)
max(rowSums(v_by_seg)) - min(rowSums(v_by_seg))
plot_seg(c(1:4),0.8)
plot_seg(alpha = .8)
# Example sample input data
data(sample_data)
# Step 1: Process the marker data and convert from mm to cm
processed_data <- process_marker_data(sample_data, convert_to_cm = TRUE)
install.packages("ChestVolume")
library(ChestVolume)
# Example sample input data
data(sample_data)
# Step 1: Process the marker data and convert from mm to cm
processed_data <- process_marker_data(sample_data, convert_to_cm = TRUE)
# Step 2: Adjust the marker positions by moving them 1 cm toward the chest center
adjusted_data <- adj_position(processed_data, distance = 1)
# Step 2: Adjust the marker positions by moving them 1 cm toward the chest center
adjusted_data <- adj_position(processed_data)
# Example sample input data
data(sample_data)
# Step 1: Process the marker data and convert from mm to cm
processed_data <- process_marker_data(sample_data, convert_to_cm = TRUE)
# Step 2: Adjust the marker positions by moving them 1 cm toward the chest center
adjusted_data <- adj_position(processed_data)
# Step 2: Adjust the marker positions by moving them 1 cm toward the chest center
adjusted_data <- adj_position(processed_data,y = 1)
# Step 2: Adjust the marker positions by moving them 1 cm toward the chest center
adjusted_data <- adj_position(processed_data, distance=1)
library(ChestVolume)
# Example sample input data
data(sample_data)
# Step 1: Process the marker data and convert from mm to cm
processed_data <- process_marker_data(sample_data, convert_to_cm = TRUE)
# Step 2: Adjust the marker positions by moving them 1 cm toward the chest center
adjusted_data <- adj_position(processed_data, distance=1)
# Step 3: Define the chest segments (example with one segment)
segments <- list(
left = c("M01", "M02", "M03", "M04","M05", "M06","M07", "M08",
"M09", "M10", "M11","M12", "M13","M14", "M15","M16", "M17","M18"))
# Step 4: Calculate the chest segment volumes
volumes<- calculate_volumes(adjusted_data, segments)
head(volumes)
# Step 5: Visualize the chest expansion in 3D
# Step 6: Plot the chest volume changes over time
plot_2d_volume(volumes, 'Segment')
# Step 6: Plot the chest volume changes over time
plot_2d_volume(volumes, 'Segment') + ylab('Volume /cm')
# Step 6: Plot the chest volume changes over time
p =plot_2d_volume(volumes, 'Segment')
p++ ylab('Volume /cm')
p+ylab('Volume /cm')
p+
p+  labs(x = bquote('x axis'~(Å^2)), y = "y axis")
p
p+ylab('a')
library(tidyverse)
p+ylab('a')
p+ ylab(bquote('Volume/'~(cm^3)))
p+ ylab(bquote('Volume/'~cm^3))
