#' # Assume 'segments.xlsx' is your Excel file with segment definitions
#' segments <- read_segment_definitions("segments.xlsx")
#' }
#' @import readxl
#' @export
read_segment_definitions <- function(filepath) {
# Load necessary package
library(readxl)
# Read the Excel file
segment_data <- read_excel(filepath, col_names = FALSE)
# Ensure there is at least one column
if (ncol(segment_data) < 2) {
stop("The Excel file must have at least two columns: one for segment names and at least one for marker names.")
}
# Initialize the segments list
segments <- list()
# Loop over each row to extract segment names and marker names
for (i in 1:nrow(segment_data)) {
segment_name <- as.character(segment_data[i, 1])
marker_names <- as.character(segment_data[i, -1])
# Remove NA and empty strings
marker_names <- marker_names[!is.na(marker_names) & marker_names != ""]
# Add to the segments list
segments[[segment_name]] <- marker_names
}
return(segments)
}
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume/data")
a <- read_segment_definitions('segment_def.xlsx')
View(a)
View(segments)
calculate_segment_volumes(b, a)
View(a)
vol <- calculate_segment_volumes(b, a)
View(vol)
plot_chest_3d(b, a, selected_segment = 'UL')
plot_chest_3d(b, a, selected_segment = 'LL')
plot_chest_3d(b, a, selected_segment = 'LR')
read_segment_definitions('segment_def.xlsx')
plot_chest_3d(b, a, selected_segment = 'LR')
a <- read_segment_definitions('segment_def.xlsx')
plot_chest_3d(b, a, selected_segment = 'LR')
plot_chest_3d(b, a, selected_segment = 'UR')
devtools::document()
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume")
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume")
devtools::document()
devtools::document()
devtools::document()
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume")
devtools::document()
devtools::document()
devtools::document()
install.packages("roxygen2")
check()
library(ChestVolume)
devtools::document()
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume")
setwd("C:/Users/whkwong/Dropbox/r script/ChestVolume/ChestVolume")
devtools::document()
devtools::document()
devtools::check()
setwd("C:/Users/user/Dropbox/r script/ChestVolume/ChestVolume")
devtools::document()
usethis::use_testthat()
usethis::use_test()
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::use_test()
test_check("ChestVolume")
library(testthat)
library(ChestVolume)
test_check("ChestVolume")
library(ChestVolume)
devtools::document()
library(ChestVolume)
data("sample_data")
df<-process_marker_data(sample_data)
df_a <- adj_position(df)
setwd("C:/Users/user/Dropbox/r script/ChestVolume/ChestVolume/data")
seg <- read_segment_definitions('segment_def.xlsx')
vol <- calculate_segment_volumes(df_a, seg)
View(vol)
View(df_a)
plot_chest_3d(vol, seg, selected_segment = 'UL', 10)
plot_chest_3d(df_a, seg, selected_segment = 'UL', 10)
#'   LL = c("M09", "M10", "M11", "M12"),
#'   LR = c("M13", "M14", "M15", "M16")
#' )
#' # Plot the 'UL' segment at timeframe 1
#' plot <- plot_chest_3d(adjusted_data, segments, selected_segment = "UL", timeframe = 1)
#' # Display the plot
#' plot
#' @import plotly
#' @import geometry
#' @export
plot_chest_3d <- function(data, segments, selected_segment, timeframe = NULL,
point_size = 5, highlight_color = 'red', marker_color = 'blue') {
# Load necessary packages
library(plotly)
library(geometry)
# Validate inputs
if (!selected_segment %in% names(segments)) {
stop("Selected segment not found in the segments list.")
}
# Use the first timeframe if not specified
if (is.null(timeframe)) {
timeframe <- min(data$Timeframe, na.rm = TRUE)
}
# Filter data for the specified timeframe
data_time <- subset(data, Timeframe == timeframe)
# Identify markers in the selected segment
selected_markers <- segments[[selected_segment]]
# Create a color vector for all markers
data_time$Color <- marker_color
data_time$Size <- point_size
# Highlight the selected segment markers
data_time$Color[data_time$Marker %in% selected_markers] <- highlight_color
data_time$Size[data_time$Marker %in% selected_markers] <- point_size * 1.5  # Make highlighted markers larger
# Create 3D scatter plot
plot <- plot_ly(data_time, x = ~X, y = ~Y, z = ~Z, type = 'scatter3d',
text = ~paste('Marker:', Marker),
hoverinfo = 'text')
# Compute convex hull for the selected segment markers
segment_data <- data_time[data_time$Marker %in% selected_markers, ]
coords <- as.matrix(segment_data[, c("X", "Y", "Z")])
if (nrow(coords) >= 4) {
# Compute the convex hull
hull <- convhulln(coords, output.options = TRUE)
# Extract vertices and simplices
vertices <- coords
simplices <- hull$hull  # Indices of the vertices forming the convex hull faces
# Adjust indices for 0-based indexing in plotly
simplices_zero_based <- simplices - 1
# Add convex hull mesh to the plot
plot <- plot %>%
add_trace(
x = vertices[, 1],
y = vertices[, 2],
z = vertices[, 3],
i = simplices_zero_based[, 1],
j = simplices_zero_based[, 2],
k = simplices_zero_based[, 3],
type = 'mesh3d',
name = paste('Convex Hull -', selected_segment),
facecolor = highlight_color,
opacity = 0.5,
showlegend = FALSE
)
} else {
warning("Not enough points to form a convex hull for the selected segment.")
}
# Add layout settings
plot <- plot %>%
layout(
scene = list(
xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z'),
camera = list(eye = list(x = 1.25, y = 1.25, z = 1.25))
),
title = paste('3D Chest Markers at Timeframe', timeframe, '- Highlighted Segment:', selected_segment)
)
return(plot)
}
plot_chest_3d(df_a, seg, selected_segment = 'UL', 10)
#'   LL = c("M09", "M10", "M11", "M12"),
#'   LR = c("M13", "M14", "M15", "M16")
#' )
#' # Plot the 'UL' segment at timeframe 1
#' plot <- plot_chest_3d(adjusted_data, segments, selected_segment = "UL", timeframe = 1)
#' # Display the plot
#' plot
#' @import plotly
#' @import geometry
#' @export
plot_chest_3d <- function(data, segments, selected_segment, timeframe = NULL,
point_size = 5, highlight_color = 'red', marker_color = 'blue') {
# Load necessary packages
library(plotly)
library(geometry)
# Validate inputs
if (!selected_segment %in% names(segments)) {
stop("Selected segment not found in the segments list.")
}
# Use the first timeframe if not specified
if (is.null(timeframe)) {
timeframe <- min(data$Timeframe, na.rm = TRUE)
}
# Filter data for the specified timeframe
data_time <- subset(data, Timeframe == timeframe)
# Identify markers in the selected segment
selected_markers <- segments[[selected_segment]]
# Create a color vector for all markers
data_time$Color <- marker_color
data_time$Size <- point_size
# Highlight the selected segment markers
data_time$Color[data_time$Marker %in% selected_markers] <- highlight_color
data_time$Size[data_time$Marker %in% selected_markers] <- point_size * 1.5  # Make highlighted markers larger
# Create 3D scatter plot
plot <- plot_ly(data_time, x = ~X, y = ~Y, z = ~Z, type = 'scatter3d',
size = ~Size, color = ~Color,
text = ~paste('Marker:', Marker),
hoverinfo = 'text')
# Compute convex hull for the selected segment markers
segment_data <- data_time[data_time$Marker %in% selected_markers, ]
coords <- as.matrix(segment_data[, c("X", "Y", "Z")])
if (nrow(coords) >= 4) {
# Compute the convex hull
hull <- convhulln(coords, output.options = TRUE)
# Extract vertices and simplices
vertices <- coords
simplices <- hull$hull  # Indices of the vertices forming the convex hull faces
# Adjust indices for 0-based indexing in plotly
simplices_zero_based <- simplices - 1
# Add convex hull mesh to the plot
plot <- plot %>%
add_trace(
x = vertices[, 1],
y = vertices[, 2],
z = vertices[, 3],
i = simplices_zero_based[, 1],
j = simplices_zero_based[, 2],
k = simplices_zero_based[, 3],
type = 'mesh3d',
name = paste('Convex Hull -', selected_segment),
facecolor = highlight_color,
opacity = 0.5,
showlegend = FALSE
)
} else {
warning("Not enough points to form a convex hull for the selected segment.")
}
# Add layout settings
plot <- plot %>%
layout(
scene = list(
xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z'),
camera = list(eye = list(x = 1.25, y = 1.25, z = 1.25))
),
title = paste('3D Chest Markers at Timeframe', timeframe, '- Highlighted Segment:', selected_segment)
)
return(plot)
}
plot_chest_3d(df_a, seg, selected_segment = 'UL', 10)
#'   LL = c("M09", "M10", "M11", "M12"),
#'   LR = c("M13", "M14", "M15", "M16")
#' )
#' # Plot the 'UL' segment at timeframe 1
#' plot <- plot_chest_3d(adjusted_data, segments, selected_segment = "UL", timeframe = 1)
#' # Display the plot
#' plot
#' @import plotly
#' @import geometry
#' @export
plot_chest_3d <- function(data, segments, selected_segment, timeframe = NULL,
point_size = 5, highlight_color = 'red', marker_color = 'blue') {
# Load necessary packages
library(plotly)
library(geometry)
# Validate inputs
if (!selected_segment %in% names(segments)) {
stop("Selected segment not found in the segments list.")
}
# Use the first timeframe if not specified
if (is.null(timeframe)) {
timeframe <- min(data$Timeframe, na.rm = TRUE)
}
# Filter data for the specified timeframe
data_time <- subset(data, Timeframe == timeframe)
# Identify markers in the selected segment
selected_markers <- segments[[selected_segment]]
# Create a color vector for all markers
data_time$Color <- marker_color
data_time$Size <- point_size
# Highlight the selected segment markers
data_time$Color[data_time$Marker %in% selected_markers] <- highlight_color
data_time$Size[data_time$Marker %in% selected_markers] <- point_size * 1.5  # Make highlighted markers larger
# Create 3D scatter plot
plot <- plot_ly(data_time, x = ~X, y = ~Y, z = ~Z, type = 'scatter3d', mode = 'markers',
marker = list(size = ~Size, color = ~Color),
text = ~paste('Marker:', Marker),
hoverinfo = 'text')
# Compute convex hull for the selected segment markers
segment_data <- data_time[data_time$Marker %in% selected_markers, ]
coords <- as.matrix(segment_data[, c("X", "Y", "Z")])
if (nrow(coords) >= 4) {
# Compute the convex hull
hull <- convhulln(coords, output.options = TRUE)
# Extract vertices and simplices
vertices <- coords
simplices <- hull$hull  # Indices of the vertices forming the convex hull faces
# Adjust indices for 0-based indexing in plotly
simplices_zero_based <- simplices - 1
# Add convex hull mesh to the plot
plot <- plot %>%
add_trace(
x = vertices[, 1],
y = vertices[, 2],
z = vertices[, 3],
i = simplices_zero_based[, 1],
j = simplices_zero_based[, 2],
k = simplices_zero_based[, 3],
type = 'mesh3d',
name = paste('Convex Hull -', selected_segment),
facecolor = highlight_color,
opacity = 0.5,
showlegend = FALSE
)
} else {
warning("Not enough points to form a convex hull for the selected segment.")
}
# Add layout settings
plot <- plot %>%
layout(
scene = list(
xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z'),
camera = list(eye = list(x = 1.25, y = 1.25, z = 1.25))
),
title = paste('3D Chest Markers at Timeframe', timeframe, '- Highlighted Segment:', selected_segment)
)
return(plot)
}
plot_chest_3d(df_a, seg, selected_segment = 'UL', 10)
#'   LL = c("M09", "M10", "M11", "M12"),
#'   LR = c("M13", "M14", "M15", "M16")
#' )
#' # Plot the 'UL' segment at timeframe 1
#' plot <- plot_chest_3d(adjusted_data, segments, selected_segment = "UL", timeframe = 1)
#' # Display the plot
#' plot
#' @import plotly
#' @import geometry
#' @export
plot_chest_3d <- function(data, segments, selected_segment, timeframe = NULL,
point_size = 5, highlight_color = 'red', marker_color = 'blue') {
# Load necessary packages
library(plotly)
library(geometry)
# Validate inputs
if (!selected_segment %in% names(segments)) {
stop("Selected segment not found in the segments list.")
}
# Use the first timeframe if not specified
if (is.null(timeframe)) {
timeframe <- min(data$Timeframe, na.rm = TRUE)
}
# Filter data for the specified timeframe
data_time <- subset(data, Timeframe == timeframe)
# Identify markers in the selected segment
selected_markers <- segments[[selected_segment]]
# Create a color vector for all markers
data_time$Color <- marker_color
data_time$Size <- point_size
# Highlight the selected segment markers
data_time$Color[data_time$Marker %in% selected_markers] <- highlight_color
data_time$Size[data_time$Marker %in% selected_markers] <- point_size * 1.5  # Make highlighted markers larger
# Create 3D scatter plot
plot <- plot_ly(data_time, x = ~X, y = ~Y, z = ~Z, type = 'scatter3d', mode = 'markers',
marker = list(size = ~Size, color = ~Color),
text = ~paste('Marker:', Marker),
hoverinfo = 'text')
# Compute convex hull for the selected segment markers
segment_data <- data_time[data_time$Marker %in% selected_markers, ]
coords <- as.matrix(segment_data[, c("X", "Y", "Z")])
if (nrow(coords) >= 4) {
# Compute the convex hull
hull <- convhulln(coords, output.options = TRUE)
# Extract vertices and simplices
vertices <- coords
simplices <- hull$hull  # Indices of the vertices forming the convex hull faces
# Adjust indices for 0-based indexing in plotly
simplices_zero_based <- simplices - 1
# Add convex hull mesh to the plot
plot <- plot %>%
add_trace(
x = vertices[, 1],
y = vertices[, 2],
z = vertices[, 3],
i = simplices_zero_based[, 1],
j = simplices_zero_based[, 2],
k = simplices_zero_based[, 3],
type = 'mesh3d',
name = paste('Convex Hull -', selected_segment),
facecolor = highlight_color,
opacity = 0.5,
showlegend = FALSE, inherit = F
)
} else {
warning("Not enough points to form a convex hull for the selected segment.")
}
# Add layout settings
plot <- plot %>%
layout(
scene = list(
xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z'),
camera = list(eye = list(x = 1.25, y = 1.25, z = 1.25))
),
title = paste('3D Chest Markers at Timeframe', timeframe, '- Highlighted Segment:', selected_segment)
)
return(plot)
}
plot_chest_3d(df_a, seg, selected_segment = 'UL', 10)
plot_2d_volume(vol, Segment)
View(vol)
View(vol)
plot_2d_volume(vol, Segment)
plot_2d_volume(vol)
plot_2d_volume(vol, segment_names = 'UL')
plot_2d_volume(vol, segment_names = 'Segment')
#' volume_data <- data.frame(
#'   frame = time_frames,
#'   UL = runif(100, min = 100, max = 150),
#'   UR = runif(100, min = 120, max = 160),
#'   LL = runif(100, min = 90, max = 140),
#'   LR = runif(100, min = 110, max = 170)
#' )
#' segment_names <- c("UL", "UR", "LL", "LR")
#' plot_volume_change_by_segment(volume_data, segment_names)
#'
plot_2d_volume <- function(volume_data, segment_names = 'Segment', title = "Volume Change by Segment") {
# Ensure 'frame' column is present
if (!"Timeframe" %in% names(volume_data)) {
stop("The 'volume_data' must contain a 'Timeframe' column for time points.")
}
# Ensure segment names match column names in volume_data
if (!all(segment_names %in% colnames(volume_data))) {
stop("All provided segment names must match column names in 'volume_data'.")
}
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(size = 1) +
labs(x = "Timeframe", y = "Volume") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
}
plot_2d_volume(vol, segment_names = 'Segment')
#' volume_data <- data.frame(
#'   frame = time_frames,
#'   UL = runif(100, min = 100, max = 150),
#'   UR = runif(100, min = 120, max = 160),
#'   LL = runif(100, min = 90, max = 140),
#'   LR = runif(100, min = 110, max = 170)
#' )
#' segment_names <- c("UL", "UR", "LL", "LR")
#' plot_volume_change_by_segment(volume_data, segment_names)
#'
plot_2d_volume <- function(volume_data, segment_names = 'Segment', title = "Volume Change by Segment") {
# Ensure 'frame' column is present
if (!"Timeframe" %in% names(volume_data)) {
stop("The 'volume_data' must contain a 'Timeframe' column for time points.")
}
# Ensure segment names match column names in volume_data
if (!all(segment_names %in% colnames(volume_data))) {
stop("All provided segment names must match column names in 'volume_data'.")
}
# Create the ggplot
ggplot(volume_data, aes(x = Timeframe, y = Volume, color = Segment)) +
geom_line(linewidth = 1) +
labs(x = "Timeframe", y = "Volume") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
}
plot_2d_volume(vol, segment_names = 'Segment')
library(ChestVolume)
data("sample_data")
df<-process_marker_data(sample_data)
df_a <- adj_position(df)
seg <- read_segment_definitions('segment_def.xlsx')
vol <- calculate_segment_volumes(df_a, seg)
plot_chest_3d(df_a, seg, selected_segment = 'UL', 10)
plot_2d_volume(vol, segment_names = 'Segment')
library(ChestVolume)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ChestVolume)
View(vol)
View(plot_2d_volume)
View(plot_2d_volume)
raw_data <- data('sample_data')
processed_data <- process_marker_data(raw_data, convert_to_cm = TRUE)
raw_data <- data('sample_data')
processed_data <- process_marker_data(raw_data, convert_to_cm = TRUE)
raw_data <- data('sample_data')
raw_data <- data(sample_data)
raw_data <- data(sample_data)
raw_data <- data('sample_data')
data('sample_data')
force(sample_data)
data(sample_data)
processed_data <- process_marker_data(sample_data, convert_to_cm = TRUE)
head(processed_data)
